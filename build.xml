<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Wezzle2D" default="default" basedir=".">
    <description>Builds, tests, and runs the project Wezzle2D.</description>
    <import file="nbproject/build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>

    <!-- Override the default task so that it includes the native libraries -->
    <!-- for all supported platforms.                                       -->
    <target depends="test,jar,windows,macosx,linux" description="Build and test whole project." name="default"/>

    <target name="windows" depends="test,jar" description="Build the Windows version of Wezzle">
        <!-- This copies the native LWJGL library. -->
        <copy todir="${dist.dir}/lib/native/windows">
            <fileset dir="lib/native/windows" excludes="*.jar"/>
        </copy>
    </target>

    <target name="macosx" depends="test,jar" description="Build the Mac OS X version of Wezzle">
        <!-- This copies the native LWJGL library. -->
        <copy todir="${dist.dir}/lib/native/macosx">
            <fileset dir="lib/native/macosx" excludes="*.jar"/>
        </copy>
    </target>

    <target name="linux" depends="test,jar" description="Build the Linux version of Wezzle">
        <!-- This copies the native LWJGL library. -->
        <copy todir="${dist.dir}/lib/native/linux">
            <fileset dir="lib/native/linux" excludes="*.jar"/>
        </copy>
    </target>

    <!-- This task creates the .exe for Windows. -->
    <target name="exe" depends="jar,windows" description="Build the Wezzle Windows .exe">
        <!-- This task creates the exe file. -->
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar"/>
        <launch4j configFile="./l4j-config.xml"/>
    </target>

    <target name="app" depends="jar,macosx" description="Build the Wezzle Mac .app">
        <!-- This take creates the app file. -->
        <taskdef name="jarbundler"
                 classname="net.sourceforge.jarbundler.JarBundler"
                 classpath="${jarbundler.dir}/jarbundler-2.1.0.jar"/>

        <mkdir dir="${dist.dir}/app" />

        <exec executable="mkalias" dir="${dist.dir}/app">
            <arg value="/Applications" />
            <arg value="Applications" />
        </exec>

        <jarbundler dir="${dist.dir}/app"
                    verbose="true"
                    showPlist="true"
                    name="${application.title}"
                    mainclass="ca.couchware.wezzle2d.Launcher"
                    icon="${opt.dir}/icons/mac-icon.icns"
                    version="${application.version}"
                    bundleid="ca.couchware.wezzle2d"
                    jvmversion="1.5+"
                    signature="WEZL"
                    vmoptions="-ea"
                    workingdirectory="$APP_PACKAGE/Contents/Resources">

            <jarfilelist dir="${dist.dir}" files="${application.title}.jar"/>

            <jarfileset dir="${dist.dir}/lib">
                <include name="*.jar"/>
            </jarfileset>

            <jarfileset dir="${dist.dir}/lib/native/macosx">
                <include name="*.jnilib"/>
                <include name="*.dylib"/>
            </jarfileset>

        </jarbundler>
    </target>

    <target name="mac-installer" depends="app">
        <exec executable="./create-wezzle-dmg" dir="${opt.dir}/dmg" />
        <move file="${opt.dir}/dmg/Wezzle-setup.dmg"
              tofile="${opt.dir}/dmg/Wezzle-${application.version}-setup.dmg" />
    </target>

    <target name="windows-installer" depends="exe" description="Build the Wezzle Windows Installer">
        <taskdef name="nsis" classname="net.sf.nsisant.Task">
            <classpath location="./lib/nsis/nsisant-1.2.jar"/>
        </taskdef>

        <nsis script="./opt/nsis/installer.nsi"/>
    </target>

    <target name="applet" depends="set-applet,jar,unset-applet">

        <!-- Delete resources.jar and re-build it with fewer resources. -->        
        <delete file="${dist.dir}/lib/resources.jar" />
        <jar destfile="${dist.dir}/lib/resources.jar">
            <fileset dir="${src.dir}" includes="resources/**">
                <exclude name="resources/sprites/Background_Circles_Green.png" />
                <exclude name="resources/sprites/Background_Circles_Gold.png" />
                <exclude name="resources/sprites/Explosion.png" />
                <exclude name="resources/music/Erhu.ogg" />
                <exclude name="resources/music/Tron*.ogg" />
                <exclude name="resources/music/Electronic*.ogg" />
                <exclude name="resources/music/HipPop2.ogg" />
                <exclude name="resources/music/HipPop3.ogg" />
                <exclude name="resources/sounds/ACHIEVEMENT.wav" />
                <exclude name="resources/sounds/BOMB.wav" />
                <exclude name="resources/sounds/STAR.wav" />
            </fileset>
            <fileset dir="${build.dir}" includes="resources/**" />
        </jar>       

        <mkdir dir="${dist.dir}/applet" />

        <copy todir="${dist.dir}/applet">
            <fileset dir="applet"/>
            <fileset dir="${dist.dir}" includes="Wezzle.jar" />
            <fileset dir="${dist.dir}" includes="lib/*.jar" />
        </copy>

        <!--
        <signjar lazy="true" alias="couchware" keystore="couchware.ks" storepass="p00bags">
            <path>
                <fileset dir="${dist.dir}/applet" includes="Wezzle.jar" />
                <fileset dir="${dist.dir}/applet" includes="lib/*.jar" />
            </path>
        </signjar>
        -->
    </target>

    <!-- This target excludes the resources from the main JAR. -->
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert pathsep=" " property="jar.classpath">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>
        <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" classpath="${libs.CopyLibs.classpath}" name="copylibs"/>
        <copylibs compress="${jar.compress}" jarfile="${dist.jar}" manifest="${manifest.file}" runtimeclasspath="${run.classpath.without.build.classes.dir}">
            <fileset dir="${build.classes.dir}" excludes="resources/**"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.classpath} lib/resources.jar"/>
            </manifest>
        </copylibs>
        <!-- Create a list of graphics resources to auto-load. -->
        <pathconvert pathsep="${line.separator}" property="sprites.list">
            <flattenmapper/>
            <fileset dir="${src.dir}/resources/sprites" includes="*.png" />
        </pathconvert>
        <mkdir dir="${build.dir}/resources"/>
        <touch file="${build.dir}/resources/sprites-list.txt"/>
        <echo message="${sprites.list}" file="${build.dir}/resources/sprites-list.txt"/>
        <!-- Delete the stupid fucking README.TXT that CopyLibs creates and has no switch to disable. -->
        <delete file="${dist.dir}/README.TXT" />
        <jar destfile="${dist.dir}/lib/resources.jar">
            <fileset dir="${src.dir}" includes="resources/**" />
            <fileset dir="${build.dir}" includes="resources/**" />
        </jar>

        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <echo>java -jar "${dist.jar.resolved}"</echo>
    </target>

    <!-- Override run so it uses the resources JAR -->
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${run.classpath}" name="classpath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" fork="true">
                    <jvmarg value="-Dfile.encoding=${source.encoding}"/>
                    <redirector errorencoding="${source.encoding}" inputencoding="${source.encoding}" outputencoding="${source.encoding}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                        <pathelement location="dist/lib/resources.jar"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>

    <!-- Override debug so it uses the resources JAR -->
    <target depends="-init-debug-args" name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" fork="true">
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <jvmarg value="-Dfile.encoding=${source.encoding}"/>
                    <redirector errorencoding="${source.encoding}" inputencoding="${source.encoding}" outputencoding="${source.encoding}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                        <pathelement location="dist/lib/resources.jar"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>

    <!-- Override profiler so it uses the resources JAR -->
    <target name="-profile-init-macrodef-profile">
        <macrodef name="resolve">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${env.@{value}}"/>
            </sequential>
        </macrodef>
        <macrodef name="profile">
            <attribute name="classname" default="${main.class}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property environment="env"/>
                <resolve name="profiler.current.path" value="${profiler.info.pathvar}"/>
                <java fork="true" classname="@{classname}" dir="${profiler.info.dir}" jvm="${profiler.info.jvm}">
                    <jvmarg value="${profiler.info.jvmargs.agent}"/>
                    <jvmarg line="${profiler.info.jvmargs}"/>
                    <env key="${profiler.info.pathvar}" path="${profiler.info.agentpath}:${profiler.current.path}"/>
                    <arg line="${application.args}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                        <pathelement location="dist/lib/resources.jar"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper type="glob" from="run-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>

    <target name="unset-applet">
        <echo>Setting APPLET = false</echo>
        <replaceregexp file="./src/java/ca/couchware/wezzle2d/Game.java"
                       match="final private static boolean APPLET = true;"
                       replace="final private static boolean APPLET = false;" />        
    </target>
    
    <target name="set-applet">
        <echo>Setting APPLET = true</echo>
        <replaceregexp file="./src/java/ca/couchware/wezzle2d/Game.java"
        match="final private static boolean APPLET = false;"
        replace="final private static boolean APPLET = true;" />
    </target>

    <!--

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. They are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported
    nbproject/build-impl.xml file.


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are:

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Wezzle2D-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on
    the compile target as the regular run target does. Again, for a list of available
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file.

    -->
</project>
